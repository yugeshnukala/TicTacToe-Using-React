{"version":3,"sources":["winner.js","App.js","serviceWorker.js","index.js"],"names":["Winner","this","props","winnerName","Component","App","state","player","count","squares","gameover","setPlayer","box","ch","forceUpdate","checkAnyWins","setTimeout","handleReset","winner","name","winnerTag","setState","className","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2080581a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Winner extends Component {\r\n    render() { \r\n        return ( <h3>Winner : {this.props.winnerName}</h3> );\r\n    }\r\n}\r\n \r\nexport default Winner;","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Winner from \"./winner.js\";\n\n\nclass App extends React.Component {\n  state = {\n    player: [\"ðŸ˜€\", \"O\"],\n    count: 0,\n    squares: [null, null, null, null, null, null, null, null, null],\n    gameover: false,\n    winnerName: \"\",\n  };\n\n  setPlayer = (box, ch) => {\n    if (this.state.squares[box] == null && !this.state.gameover) {\n      this.state.squares[box] = ch;\n      this.state.count++;\n      this.forceUpdate();\n      this.checkAnyWins();\n      if (this.state.count > 8) {\n        setTimeout(() => {\n          this.handleReset();\n        }, 3000);\n      }\n    }\n  };\n\n  winner = (name) => {\n    this.state.gameover = true;\n    this.state.winnerName = name;\n  };\n\n  checkAnyWins = () => {\n    if (\n      this.state.squares[0] != null &&\n      this.state.squares[1] != null &&\n      this.state.squares[2] != null &&\n      this.state.squares[0] === this.state.squares[1] &&\n      this.state.squares[1] === this.state.squares[2]\n    ) {\n      this.winner(this.state.squares[2]);\n    }\n    if (\n      this.state.squares[3] != null &&\n      this.state.squares[4] != null &&\n      this.state.squares[5] != null &&\n      this.state.squares[3] === this.state.squares[4] &&\n      this.state.squares[4] === this.state.squares[5]\n    ) {\n      this.winner(this.state.squares[5]);\n    }\n    if (\n      this.state.squares[6] != null &&\n      this.state.squares[7] != null &&\n      this.state.squares[8] != null &&\n      this.state.squares[6] === this.state.squares[7] &&\n      this.state.squares[7] === this.state.squares[8]\n    ) {\n      this.winner(this.state.squares[8]);\n    }\n    if (\n      this.state.squares[0] != null &&\n      this.state.squares[3] != null &&\n      this.state.squares[6] != null &&\n      this.state.squares[0] === this.state.squares[3] &&\n      this.state.squares[3] === this.state.squares[6]\n    ) {\n      this.winner(this.state.squares[6]);\n    }\n    if (\n      this.state.squares[1] != null &&\n      this.state.squares[4] != null &&\n      this.state.squares[7] != null &&\n      this.state.squares[1] === this.state.squares[4] &&\n      this.state.squares[4] === this.state.squares[7]\n    ) {\n      this.winner(this.state.squares[7]);\n    }\n    if (\n      this.state.squares[2] != null &&\n      this.state.squares[5] != null &&\n      this.state.squares[8] != null &&\n      this.state.squares[2] === this.state.squares[5] &&\n      this.state.squares[5] === this.state.squares[8]\n    ) {\n      this.winner(this.state.squares[8]);\n    }\n    if (\n      this.state.squares[2] != null &&\n      this.state.squares[4] != null &&\n      this.state.squares[6] != null &&\n      this.state.squares[2] === this.state.squares[4] &&\n      this.state.squares[4] === this.state.squares[6]\n    ) {\n      this.winner(this.state.squares[6]);\n    }\n    if (\n      this.state.squares[0] != null &&\n      this.state.squares[4] != null &&\n      this.state.squares[8] != null &&\n      this.state.squares[0] === this.state.squares[4] &&\n      this.state.squares[4] === this.state.squares[8]\n    ) {\n      this.winner(this.state.squares[8]);\n    }\n  };\n\n  winnerTag = () => {\n\n    if (this.state.gameover)\n      return <Winner winnerName={this.state.winnerName} />;\n    if (this.state.count > 8) {\n      return <h3>Game Draw!</h3>;\n    }\n    return <h3>Player's Turn : {this.state.player[this.state.count % 2]}</h3>;\n  };\n\n  handleReset = () => {\n    this.setState({\n      count: 0,\n      squares: [null, null, null, null, null, null, null, null, null],\n      gameover: false,\n      winnerName: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App-header\">Tic - Tac - Toe</div>\n        <div className=\"win\">{this.winnerTag()}</div>\n        <div className=\"board\">\n          <div className=\"row\">\n            <button\n              onClick={() =>\n                this.setPlayer(0, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[0]}\n            </button>\n            <button\n              onClick={() =>\n                this.setPlayer(1, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[1]}\n            </button>\n            <button\n              onClick={() =>\n                this.setPlayer(2, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[2]}\n            </button>\n          </div>\n          <div className=\"row\">\n            <button\n              onClick={() =>\n                this.setPlayer(3, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[3]}\n            </button>\n            <button\n              onClick={() =>\n                this.setPlayer(4, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[4]}\n            </button>\n            <button\n              onClick={() =>\n                this.setPlayer(5, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[5]}\n            </button>\n          </div>\n          <div className=\"row\">\n            <button\n              onClick={() =>\n                this.setPlayer(6, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[6]}\n            </button>\n            <button\n              onClick={() =>\n                this.setPlayer(7, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[7]}\n            </button>\n            <button\n              onClick={() =>\n                this.setPlayer(8, this.state.player[this.state.count % 2])\n              }\n              className=\"but\"\n            >\n              {this.state.squares[8]}\n            </button>\n          </div>\n        </div>\n        <div>\n          <button\n            className=\"btn-lg btn-secondary resbut\"\n            onClick={this.handleReset}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}